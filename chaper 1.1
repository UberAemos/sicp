Answer 1.1. Let's say U is user and I is interpreter

U: 10
I: 10

U: (+ 5 3 4)
I: 12

U: (- 9 1)
I: 8

U: (/ 6 2)
I: 3

U: (+ (* 2 4) (- 4 6))
I: 6

U: (define a 3)
I:

U: (define b (+ a 1))
I:

U: (+ a b (* a b))
I: 19

U: (= a b)
I: #f

U: (if (and (> b a) (< b (* a b)))
	b
	a)
I:4

U: (cond ((= a 4) 6)
		 ((= b 4)(+ 6 7 a))
		 (else 25))
I: 17

U: (+ 2 (if (> b a) b a))
I: 6

U: (* (cond ((> a b) a)
			((< a b) b)
			(else -1))
	  (+ a 1))
I: 16

Answer 1.2.

(/ 
	(+ 5 1 
		 (- 2 
			(- 3 
			   (+ 6 
			      (/ 1 5)))))
    (* 3 
       (- 6 2)
       (- 2 7)))

Answer 1.3.

(define (square x) 
	(* x x))

(define (sum-of-squares x y)
	(+ (square x) (square y)))

(define (max x y) 
	(if (< x y)
		y
		x))

(define (min x y)
	(if (< x y)
		x
		y))

(define (sum-of-squares-of-max-two x y z)
	(sum-of-squares
		(max x y)
		(max
			(min x y)
			z)))

Answer 1.4.

Procedure sums a with the absolute value of b

(a-plus-abs-b 5 -10)

((if (> -10 0) + -) 5 -10)
(- 5 -10)
15

Answer 1.5.

applicative-order tries to expand the arguments first, so it will never finish on this procedure

(test 0 (p)) -> expand p
(test 0 (p)) -> expand p
(test 0 (p)) -> expand p...

while normal-order finishes:

(test 0 (p))
(if (= 0 0) 0 (p))
0

Answer 1.6.

instead of using primitive expression if, user defines a new function new-if. Functions first fully expand their arguments,
and then evaluate them. This way, improve function constantly run as good-enough? function is never evaluated.
